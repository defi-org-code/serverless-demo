service: serverless

custom:
  awsProject: "defi.org by Rotem"
  awsStorageARN: "arn:aws:elasticfilesystem:us-east-2:506367651493:access-point/fsap-0be903f3557bc34ca"
  awsStorageSG: "sg-beb396d6"
  awsStorageSubnet: "subnet-25dd204d"

provider:
  name: aws
  runtime: nodejs14.x
  region: us-east-2
  environment:
    DYNAMODB_TABLE: ${self:service}-${self:provider.stage}
  tags:
    Project: ${self:custom.awsProject}
  stackTags:
    Project: ${self:custom.awsProject}
  deploymentBucket:
    tags:
      Project: ${self:custom.awsProject}
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - ec2:CreateNetworkInterface
            - ec2:DescribeNetworkInterface
            - ec2:DeleteNetworkInterface
            - elasticfilesystem:ClientMount
            - elasticfilesystem:ClientRootAccess
            - elasticfilesystem:ClientWrite
            - elasticfilesystem:DescribeMountTargets
          Resource: ${self:custom.awsStorageARN}
      tags:
        Project: ${self:custom.awsProject}

functions:
  create:
    handler: handler.create
    events:
      - http:
          path: create/{value}
          method: get
          cors: true
    fileSystemConfig:
      localMountPath: /mnt/efs
      arn: ${self:custom.awsStorageARN}
    vpc:
      securityGroupIds:
        - ${self:custom.awsStorageSG}
      subnetIds:
        - ${self:custom.awsStorageSubnet}
  list:
    handler: handler.list
    events:
      - http:
          path: list
          method: get
          cors: true
    fileSystemConfig:
      localMountPath: /mnt/efs
      arn: ${self:custom.awsStorageARN}
    vpc:
      securityGroupIds:
        - ${self:custom.awsStorageSG}
      subnetIds:
        - ${self:custom.awsStorageSubnet}

#  list:
#    handler: handler.list
#    events:
#      - http:
#          path: list
#          method: get
#          cors: true
#  get:
#    handler: handler.get
#    events:
#      - http:
#          path: get/{id}
#          method: get
#          cors: true
#  update:
#    handler: handler.update
#    events:
#      - http:
#          path: update/{id}
#          method: get
#          cors: true
#  delete:
#    handler: handler.delete
#    events:
#      - http:
#          path: delete/{id}
#          method: get
#          cors: true
